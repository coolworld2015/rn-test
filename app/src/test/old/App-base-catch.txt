'use strict'

import React, { Component } from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    Image,
    TouchableHighlight,
    ListView,
    ScrollView,
    ActivityIndicatorIOS,
    TabBarIOS,
    NavigatorIOS,
    TextInput
} from 'react-native';

class App extends Component {
      constructor(props){
        super(props);

        this.state = {
            checkingAuth: false,
            showProgress: false,
            isLoggedIn: false 
        }
    }
  
  componentWillUnmount() {
  	this.cleanup();
  }
  
  render() {
    if(this.state.checkingAuth){
      return (
        <View style={styles.container}>
          <ActivityIndicatorIOS
            animating={true}
            size="large"
            style={styles.loader} />
        </View>
      )
    }

    if(this.state.isLoggedIn){
      return (
        <AppContainer />
      )
    }else{
      return (
        <Login onLogin={this.onLogin.bind(this)} />
      )
    }
  }

  onLogin(){
    console.log('onLogin');
    this.setState({isLoggedIn: true});
  }

  onLogOut(){
    console.log('onLogOut');
    this.setState({isLoggedIn: false});
  }
}

class AppContainer extends Component {
    constructor(props){
        super(props);

        this.state = {
            selectedTab: 'Search'
        }
    }
 
    render(){
      return (
        <TabBarIOS style={styles.AppContainer}>
            <TabBarIOS.Item
                title="Clients"
                selected={this.state.selectedTab == 'Clients'}
        				onPress={()=> this.setState({selectedTab: 'Clients'})}>

        				<NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    initialRoute={{
                        component: Clients,
                        title: 'Clients'
                    }}
                />
            </TabBarIOS.Item>
                
            <TabBarIOS.Item
                title="Collection"
                selected={this.state.selectedTab == 'Collection'}
        				onPress={()=> this.setState({selectedTab: 'Collection'})}>

                <NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    initialRoute={{
                        component: Collection,
                        title: 'Collection'
                    }}
                />
            </TabBarIOS.Item>
                
            <TabBarIOS.Item
                title="Phones"
                selected={this.state.selectedTab == 'Phones'}
        				onPress={()=> this.setState({selectedTab: 'Phones'})}>

                <NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    initialRoute={{
                        component: Phones,
                        title: 'Phones'
                    }}
                />
            </TabBarIOS.Item>
                
            <TabBarIOS.Item
                title="Search"
                selected={this.state.selectedTab == 'Search'}
                onPress={()=> this.setState({selectedTab: 'Search'})}>
 
                <NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    ref="nav"
                    initialRoute={{
                        component: Search,
                        title: 'Search',
                        leftButtonTitle: 'Add',          
                        rightButtonTitle: 'New',
                        onRightButtonPress: () => {
                        this.refs.nav.navigator.push({
                          title: "Collection",
                          component: Collection,
                          rightButtonTitle: 'Cancel',
                          onRightButtonPress: () => { this.refs.nav.navigator.pop(); }
                        });}
                		}}
               />
            </TabBarIOS.Item>
        
        </TabBarIOS>
      );
    }
}

class Login extends Component {
    constructor(props){
        super(props);

        this.state = {
            showProgress: false,
        }
    }
 
    getUser(){
           this.setState({
             showProgress: true
           });
      
      console.log('starting geting user...');
 			fetch('http://ui-warehouse.herokuapp.com/api/users/findByName/' 
       + 	this.state.username, {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
 				.then((response)=> response.json())
        .then((responseData)=> {
 					
   				if (this.state.password == responseData.pass) {
            
               this.setState({
                 badCredentials: false
               });
               
            	this.props.onLogin().bind(this);
            
          } else {
             	this.setState({
                 badCredentials: true
             });
          }
       })
         .catch((error)=> {
             this.setState({
               badCredentials: true
             });
       })
         .finally(()=> {
           this.setState({
             showProgress: false
           });
 				});
    }
	
    render(){
        var errorCtrl = <View />;

        if(!this.state.success && this.state.badCredentials){
            errorCtrl = <Text style={styles.error}>
                That username and password combination did not work
            </Text>;
        }

        if(!this.state.success && this.state.unknownError){
            errorCtrl = <Text style={styles.error}>
                We experienced an unexpected issue
            </Text>;
        }

        return (
          <ScrollView>
            <View style={styles.container}>
                <Image style={styles.logo} 
          				source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}}
          			/>
                <Text style={styles.heading}>RX-Test</Text>
                <TextInput
                    onChangeText={(text)=> this.setState({username: text})}
                    style={styles.loginInput}
                    placeholder="Login"></TextInput>
                <TextInput
                    onChangeText={(text)=> this.setState({password: text})}
                    style={styles.loginInput}
                    placeholder="Password" secureTextEntry={true}></TextInput>
                <TouchableHighlight
                    onPress={this.onLoginPressed.bind(this)}
                    //onPress={()=> this.getUser()}
                    style={styles.button}>
                    <Text style={styles.buttonText}>Log in</Text>
                </TouchableHighlight>

                {errorCtrl}

                <ActivityIndicatorIOS
                    animating={this.state.showProgress}
                    size="large"
                    style={styles.loader}
                 />
            </View>
          </ScrollView>      
        )
    }

    onLoginPressed(){
				this.props.onLogin();
    }
}

class Clients extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });

        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            showProgress: true,
          	resultsCount: 0
        };

      	this.getClients();
    }

    getClients(){
       fetch('http://ui-warehouse.herokuapp.com/api/clients/get', {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
 				.then((response)=> response.json())
        .then((responseData)=> {

           this.setState({
             dataSource: this.state.dataSource.cloneWithRows(responseData),
             resultsCount: responseData.length
           });
       })
         .catch((error)=> {
             this.setState({
               serverError: true
             });
       })
         .finally(()=> {
           this.setState({
             showProgress: false
           });
 				});
    }

    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.name,
            component: ClientDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }

    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={{
                flex: 1,
                flexDirection: 'row',
                padding: 20,
                alignItems: 'center',
                borderColor: '#D7D7D7',
                borderBottomWidth: 1,
                backgroundColor: '#fff'
            }}>
              <Text style={{backgroundColor: '#fff'}}>
                  {rowData.name}
              </Text>
            </View>
          </TouchableHighlight>
        );
    }

    render(){
      var errorCtrl = <View />;

        if(this.state.serverError){
            errorCtrl = <Text style={styles.error}>
                Something went wrong. 
            </Text>;
        }
      
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (
          <View style={{flex: 1, justifyContent: 'center'}}>
            <View style={{marginTop: 60}}>
              <Text style={styles.countHeader}>
              	{this.state.resultsCount} entries were found.
              </Text>
          
          	{errorCtrl}
          
            </View>

            <ScrollView style={{marginTop: 0, marginBottom: 60}}>
              <ListView
                dataSource={this.state.dataSource}
                renderRow={this.renderRow.bind(this)}
              />
    				</ScrollView>
  			  </View>
      );
	}
}

class ClientDetails extends Component {
    constructor(props){
        super(props);

        this.state = {
            pushEvent: props.pushEvent
        };
    }
	
  render() {
    return (
      <ScrollView>
        <View style={{
            flex: 1,
            paddingTop: 20,
            justifyContent: 'flex-start',
            alignItems: 'center'
        }}>

        <Text style={styles.welcome}>
          {this.state.pushEvent.name}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.id}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.address}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.cv}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.description}
        </Text>

        </View>
      </ScrollView>
    );
  }
}

class Collection extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });
      
        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            showProgress: true,
						resultsCount: 0
        };
      
      	this.getCollection();
    }

    getCollection(){
       fetch('http://ui-collection.herokuapp.com/api/items/get', {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
          .then((response)=> response.json())
          .then((responseData)=> {
         
             this.setState({
               dataSource: this.state.dataSource.cloneWithRows(responseData),
               resultsCount: responseData.length
             })
        })
         .catch((error)=> {
             this.setState({
               serverError: true
             });
       })
         .finally(()=> {
           this.setState({
             showProgress: false
           });
 				});

    }
  
    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.name,
            component: CollectionDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }
  
    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={{
                flex: 1,
                flexDirection: 'row',
                padding: 0,
                alignItems: 'center',
                borderColor: '#D7D7D7',
                borderBottomWidth: 1,
                backgroundColor: '#fff'
            }}>
              <Image
                  source={{uri: rowData.pic}}
                  style={{
                         height: 100,
                         width: 100,
                         borderRadius: 20,
                         margin: 20
                        }}
              />
                <View style={{ 
                             flex: 1, 
                             flexDirection: 'column', 
                             justifyContent: 'space-between'
                            }}> 
                    <Text>{rowData.name}</Text>
              </View> 
            </View>
          </TouchableHighlight>    
        );
    }

    render(){
      var errorCtrl = <View />;

        if(this.state.serverError){
            errorCtrl = <Text style={styles.error}>
                Something went wrong. 
            </Text>;
        }
		
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (
          <View style={{flex: 1, justifyContent: 'center'}}>
            <View style={{marginTop: 60}}>
              <Text style={styles.countHeader}>
                {this.state.resultsCount} entries were found.
              </Text>
          
          	{errorCtrl}
          
            </View>

            <ScrollView style={{marginTop: 0, marginBottom: 60}}>
              <ListView 
                dataSource={this.state.dataSource}
                renderRow={this.renderRow.bind(this)}
              />
        	</ScrollView>
        </View>
      )
	}
}

class CollectionDetails extends Component {
    constructor(props){
        super(props);

        this.state = {
            pushEvent: props.pushEvent
        }
    }
	
  render() {
    return (
      <ScrollView>
        <View style={{
            flex: 1,
            paddingTop: 20,
            justifyContent: 'flex-start',
            alignItems: 'center'
        }}>

	   <Image
		  source={{uri: this.state.pushEvent.pic}}
		  style={{
				 height: 200,
				 width: 200,
				 borderRadius: 20,
				 margin: 20
				}}
		/>

        <Text style={styles.welcome}>
          {this.state.pushEvent.name}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.id}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.description}
        </Text>

        </View>
      </ScrollView>
    );
  }
}
  
class Search extends Component {
    constructor(props){
        super(props);

        this.state = {
            showProgress: false
        }
    }

    render(){
	    var errorCtrl = <View />;

        if(this.state.serverError){
            errorCtrl = <Text style={styles.error}>
                Something went wrong. 
            </Text>;
        }

        return (
          <ScrollView>
            <View style={{marginTop: 20}}>
          			<TouchableHighlight
                    style={styles.button}>
                    <Text style={styles.buttonText}>Search movies</Text>
                </TouchableHighlight>
          			<TextInput
                    onChangeText={(text)=> this.setState({searchQuery: text})}
                    style={styles.loginInput}
                    placeholder="Search movies">
                </TextInput>
                    
                <TouchableHighlight
                    onPress={this.onSearchPressed.bind(this)}
                    style={styles.button}>
                    <Text style={styles.buttonText}>Search</Text>
                </TouchableHighlight>

                {errorCtrl}

                <ActivityIndicatorIOS
                    animating={this.state.showProgress}
                    size="large"
                    style={styles.loader}
                 />
            </View>
         </ScrollView>        
        )
    }

    onSearchPressed(){
        this.props.navigator.push({
            component: Movies,
            title: this.state.searchQuery,
            passProps: {
                searchQuery: this.state.searchQuery
            }
        });

    }
}

class Movies extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });

        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            searchQuery: props.searchQuery,
            showProgress: true,
						resultsCount: 0
        };

      	this.getMovies();
    }

    getMovies(){ 
       fetch('https://itunes.apple.com/search?media=movie&term='
             + this.state.searchQuery, {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
          .then((response)=> response.json())
          .then((responseData)=> {
						 console.log(responseData.results)
             this.setState({
               dataSource: this.state.dataSource.cloneWithRows(responseData.results),
               resultsCount: responseData.results.length
             });
         /*
         this.props.navigator.replace({
               component: Movies,
               title: this.state.resultsCount
             });
				*/
       })
         .catch((error)=> {
             this.setState({
               serverError: true
             });
       })
         .finally(()=> {
           this.setState({
             showProgress: false
           });
 				});       
    }

    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.trackName,
            component: MoviesDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }

    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={styles.imgsList}>
              <Image
        source={{uri: rowData.artworkUrl100.replace('100x100bb.jpg', '500x500bb.jpg')}}
                  style={styles.img}
              />
                <View style={{ 
                             flex: 1, 
                             flexDirection: 'column', 
                             justifyContent: 'space-between'
                            }}> 
                    <Text>{rowData.trackName}</Text>
              			<Text>{rowData.releaseDate.split('-')[0]}</Text>
                    <Text>{rowData.country}</Text>
                    <Text>{rowData.primaryGenreName}</Text>
                    <Text>{rowData.artistName}</Text>
              </View>              
            </View>
          </TouchableHighlight>
        );
    }

    render(){
      var errorCtrl = <View />;

        if(this.state.serverError){
            errorCtrl = <Text style={styles.error}>
                Something went wrong. 
            </Text>;
        }
		
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (

        <View style={{flex: 1, justifyContent: 'center'}}>
          <View style={{marginTop: 60}}>
            <Text style={styles.countHeader}>
            	{this.state.resultsCount} entries were found.
              </Text>
          
          	{errorCtrl}
          
            </View>

          <ScrollView style={{marginTop: 0, marginBottom: 60}}>
            <ListView 
              dataSource={this.state.dataSource}
              renderRow={this.renderRow.bind(this)}
            />
  				</ScrollView>
			  </View>
      )
	}
}

class MoviesDetails extends Component {
    constructor(props){
        super(props);

        this.state = {
            pushEvent: props.pushEvent
        };
    }
	
  render() {
    return (
      <ScrollView>
        <View style={{
            flex: 1,
            paddingTop: 20,
            justifyContent: 'flex-start',
            alignItems: 'center'
        }}>

       <Image
        source={{uri: this.state.pushEvent.artworkUrl100.replace('100x100bb.jpg', '500x500bb.jpg')}}
        style={{
           height: 300,
           width: 200,
           borderRadius: 20,
           margin: 20
          }}
      />

          <Text style={styles.welcome}>
            {this.state.pushEvent.trackName}
          </Text>
          
          <Text style={styles.welcome}>
            {this.state.pushEvent.releaseDate.split('-')[0]}
          </Text>     
          
          <Text style={styles.welcome}>
            {this.state.pushEvent.country}
          </Text> 
          
          <Text style={styles.welcome}>
            {this.state.pushEvent.primaryGenreName}
          </Text>  

          <Text style={styles.welcome}>
            {this.state.pushEvent.artistName}
          </Text>  

          <Text style={styles.welcome}>
            {this.state.pushEvent.longDescription}
          </Text>
          
        </View>
      </ScrollView>
    );
  }
}

class Phones extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });

        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            showProgress: true,
			resultsCount: 0
        };

      	this.getPhones();
    }

    getPhones(){
       fetch('http://ui-base.herokuapp.com/api/items/get', {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
 				.then((response)=> response.json())
        .then((responseData)=> {

           this.setState({
             dataSource: this.state.dataSource.cloneWithRows(responseData.splice(0,10)),
             //resultsCount: responseData.length
             resultsCount: 10
           })
       })
         .catch((error)=> {
             this.setState({
               serverError: true
             });
       })
         .finally(()=> {
           this.setState({
             showProgress: false
           });
 				});       
    }

    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.name,
            component: PhoneDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }

    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={{
                flex: 1,
                flexDirection: 'row',
                padding: 20,
                alignItems: 'center',
                borderColor: '#D7D7D7',
                borderBottomWidth: 1,
                backgroundColor: '#fff'
            }}>
              <Text style={{backgroundColor: '#fff'}}>
                  {rowData.name} - {rowData.phone}
              </Text>
            </View>
          </TouchableHighlight>
        );
    }

    render(){
      var errorCtrl = <View />;

        if(this.state.serverError){
            errorCtrl = <Text style={styles.error}>
                Something went wrong. 
            </Text>;
        }
		
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (
          <View style={{flex: 1, justifyContent: 'center'}}>
            <View style={{marginTop: 60}}>
              <Text style={styles.countHeader}>
              	{this.state.resultsCount} entries were found.
              </Text>
          
          	{errorCtrl}
          
            </View>

            <ScrollView style={{marginTop: 0, marginBottom: 60}}>
              <ListView
                dataSource={this.state.dataSource}
                renderRow={this.renderRow.bind(this)}
              />
    				</ScrollView>
  			  </View>
      );
	}
}

class PhoneDetails extends Component {
    constructor(props){
        super(props);

        this.state = {
            pushEvent: props.pushEvent
        };
    }
	
  render() {
    return (
      <ScrollView>
        <View style={{
            flex: 1,
            paddingTop: 20,
            justifyContent: 'flex-start',
            alignItems: 'flex-start'
        }}>

          <Text style={styles.welcome}>
            Name: {this.state.pushEvent.name}
          </Text>

          <Text style={styles.welcome}>
            ID: {this.state.pushEvent.id}
          </Text>

          <Text style={styles.welcome}>
            Phone: {this.state.pushEvent.phone}
          </Text>

          <Text style={styles.welcome}>
            Address: {this.state.pushEvent.street} {this.state.pushEvent.house}
          </Text>

          <Text style={styles.welcome}>
            Apt: {this.state.pushEvent.apt}
          </Text>

          <Text style={styles.welcome}>
            Zip: {this.state.pushEvent.index}
          </Text>

        </View>
      </ScrollView>
    );
  }
}

const styles = StyleSheet.create({
    AppContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'gray',
    },
    countHeader: {
      fontSize: 16,
      textAlign: 'center',
      padding: 15,
      backgroundColor: '#F5FCFF',
    },
    welcome: {
      fontSize: 20,
      textAlign: 'center',
      margin: 20,
    },
    container: {
        //backgroundColor: '#F5FCFF',
        paddingTop: 40,
        padding: 10,
        alignItems: 'center',
        flex: 1
    },
    logo: {
        width: 150,
        height: 150,
        paddingTop: 140
    },
    heading: {
        fontSize: 30,
        margin: 20
    },
    loginInput: {
        height: 50,
        marginTop: 10,
        padding: 4,
        fontSize: 18,
        borderWidth: 1,
        borderColor: '#48BBEC',
        borderRadius: 0,
        color: '#48BBEC'
    },
    button: {
        height: 50,
        backgroundColor: '#48BBEC',
        borderColor: '#48BBEC',
        alignSelf: 'stretch',
        marginTop: 10,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 5
    },
    buttonText: {
        color: '#fff',
        fontSize: 24
    },
    loader: {
        marginTop: 20
    },
    error: {
        color: 'red',
        paddingTop: 10,
        textAlign: 'center'
    },
    imgsList: {
      flex: 1,
      flexDirection: 'row',
      padding: 0,
      alignItems: 'center',
      borderColor: '#D7D7D7',
      borderBottomWidth: 1,
      backgroundColor: '#fff'
    },
    img: {
      height: 95,
      width: 75,
      borderRadius: 20,
      margin: 20
    }
});
AppRegistry.registerComponent('SampleApp', () => App);
