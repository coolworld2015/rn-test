'use strict'

import React, { Component } from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    Image,
    TouchableHighlight,
    ListView,
    ScrollView,
    ActivityIndicatorIOS,
    TabBarIOS,
    NavigatorIOS,
    TextInput
} from 'react-native';

class App extends Component {
      constructor(props){
        super(props);

        this.state = {
            checkingAuth: false,
            showProgress: false,
            isLoggedIn: false 
        }
    }
  
  render() {
    if(this.state.checkingAuth){
      return (
        <View style={styles.container}>
          <ActivityIndicatorIOS
            animating={true}
            size="large"
            style={styles.loader} />
        </View>
      )
    }

    if(this.state.isLoggedIn){
      return (
        <AppContainer />
      )
    }else{
      return (
        <Login onLogin={this.onLogin.bind(this)} />
      )
    }
  }

  onLogin(){
    console.log('onLogin');
    this.setState({isLoggedIn: true});
  }

  onLogOut(){
    console.log('onLogOut');
    this.setState({isLoggedIn: false});
  }
}

class AppContainer extends Component {
    constructor(props){
        super(props);

        this.state = {
            selectedTab: 'Search'
        }
    }

    render(){
      return (
        <TabBarIOS style={styles.AppContainer}>
            <TabBarIOS.Item
                title="Clients"
                selected={this.state.selectedTab == 'Clients'}
        				onPress={()=> this.setState({selectedTab: 'Clients'})}
  					>
                <NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    initialRoute={{
                        component: Clients,
                        title: 'Clients'
                    }}
                />
            </TabBarIOS.Item>
        
            <TabBarIOS.Item
                title="Collection"
                selected={this.state.selectedTab == 'Collection'}
        				onPress={()=> this.setState({selectedTab: 'Collection'})}
  					>
                <NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    initialRoute={{
                        component: Collection,
                        title: 'Collection'
                    }}
                />
            </TabBarIOS.Item>
                
            <TabBarIOS.Item
                title="Search"
                selected={this.state.selectedTab == 'Search'}
                onPress={()=> this.setState({selectedTab: 'Search'})}
             >
 
                <NavigatorIOS
                    style={{
                        flex: 1
                    }}
                    initialRoute={{
                        component: Search,
                        title: 'Search'
                    }}
                />
            </TabBarIOS.Item>
        
        </TabBarIOS>
      );
    }
}

class Login extends Component {
    constructor(props){
        super(props);

        this.state = {
            showProgress: false
        }
    }

    render(){
        var errorCtrl = <View />;

        if(!this.state.success && this.state.badCredentials){
            errorCtrl = <Text style={styles.error}>
                That username and password combination did not work
            </Text>;
        }

        if(!this.state.success && this.state.unknownError){
            errorCtrl = <Text style={styles.error}>
                We experienced an unexpected issue
            </Text>;
        }

        return (
            <View style={styles.container}>
                <Image style={styles.logo} 
          				source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}}
          			/>
                <Text style={styles.heading}>RX-Base</Text>
                <TextInput
                    onChangeText={(text)=> this.setState({username: text})}
                    style={styles.loginInput}
                    placeholder="Login"></TextInput>
                <TextInput
                    onChangeText={(text)=> this.setState({password: text})}
                    style={styles.loginInput}
                    placeholder="Password" secureTextEntry={true}></TextInput>
                <TouchableHighlight
                    onPress={this.onLoginPressed.bind(this)}
                    style={styles.button}>
                    <Text style={styles.buttonText}>Log in</Text>
                </TouchableHighlight>

                {errorCtrl}

                <ActivityIndicatorIOS
                    animating={this.state.showProgress}
                    size="large"
                    style={styles.loader}
                 />
            </View>
        )
    }

    onLoginPressed(){
        console.log('Attempting to log in with username ' + this.props.onLogin);
				this.props.onLogin();
    }
}

class Clients extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });
      
        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            showProgress: true
        };
      
      	this.getClients();
    }

    getClients(){
       fetch('http://ui-warehouse.herokuapp.com/api/clients/get', {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
 				.then((response)=> response.json())
        .then((responseData)=> {
         
           this.setState({
             dataSource: this.state.dataSource.cloneWithRows(responseData),
             showProgress: false
           });
       })
    }
  
    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.name,
            component: ClientDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }
  
    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={{
                flex: 1,
                flexDirection: 'row',
                padding: 20,
                alignItems: 'center',
                borderColor: '#D7D7D7',
                borderBottomWidth: 1,
                backgroundColor: '#fff'
            }}>
              <Text style={{backgroundColor: '#fff'}}>
                  {rowData.name}
              </Text>
            </View>
          </TouchableHighlight>    
        );
    }

    render(){
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (
          <ListView style={{marginTop: 65}}
            dataSource={this.state.dataSource}
            renderRow={this.renderRow.bind(this)} 
  		  />
      )
	}
}

class ClientDetails extends Component {
    constructor(props){
        super(props);

        this.state = {
            pushEvent: props.pushEvent
        };
    }
	
  render() {
    return (
      <View style={{
          flex: 1,
          paddingTop: 80,
          justifyContent: 'flex-start',
          alignItems: 'center'
      }}>
 
        <Text style={styles.welcome}>
          {this.state.pushEvent.id}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.name}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.address}
        </Text>      

        <Text style={styles.welcome}>
          {this.state.pushEvent.cv}
        </Text>         

        <Text style={styles.welcome}>
          {this.state.pushEvent.description}
        </Text>  
 
      </View>
    );
  }
}



class Collection extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });
      
        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            showProgress: true
        };
      
      	this.getCollection();
    }

    getCollection(){
       fetch('http://ui-collection.herokuapp.com/api/items/get', {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
          .then((response)=> response.json())
          .then((responseData)=> {
         
         this.setState({
           dataSource: this.state.dataSource.cloneWithRows(responseData),
           showProgress: false
         });
       })
    }
  
    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.name,
            component: CollectionDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }
  
    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={{
                flex: 1,
                flexDirection: 'row',
                padding: 0,
                alignItems: 'center',
                borderColor: '#D7D7D7',
                borderBottomWidth: 1,
                backgroundColor: '#fff'
            }}>
              <Image
                  source={{uri: rowData.pic}}
                  style={{
                         height: 100,
                         width: 100,
                         borderRadius: 20,
                         margin: 20
                        }}
              />
              
              <Text style={{backgroundColor: '#fff'}}>
                  {rowData.name}
              </Text>
            </View>
          </TouchableHighlight>    
        );
    }

    render(){
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (
          <ListView style={{marginTop: 65}}
            dataSource={this.state.dataSource}
            renderRow={this.renderRow.bind(this)} 
  				/>
      )
	}
}

class CollectionDetails extends Component {
    constructor(props){
        super(props);

        this.state = {
            pushEvent: props.pushEvent
        };
    }
	
  render() {
    return (
      <View style={{
          flex: 1,
          paddingTop: 80,
          justifyContent: 'flex-start',
          alignItems: 'center'
      }}>
	  
	   <Image
		  source={{uri: this.state.pushEvent.pic}}
		  style={{
				 height: 200,
				 width: 200,
				 borderRadius: 20,
				 margin: 20
				}}
		/>
			  
        <Text style={styles.welcome}>
          {this.state.pushEvent.name}
        </Text>

        <Text style={styles.welcome}>
          {this.state.pushEvent.id}
        </Text>         

        <Text style={styles.welcome}>
          {this.state.pushEvent.description}
        </Text>  
 
      </View>
    );
  }
}

class SearchResults extends Component {
    constructor(props){
        super(props);

        this.state = {
            showProgress: false
        }
    }

  render() {
    return (
      <View style={{
          flex: 1,
          paddingTop: 80,
          justifyContent: 'flex-start',
          alignItems: 'center'
      }}>
 
        <Text style={styles.welcome}>
          xxx
        </Text>
 
      </View>
    );
  }
}
  
class Search extends Component {
    constructor(props){
        super(props);

        this.state = {
            showProgress: false
        }
    }

    render(){
        var errorCtrl = <View />;

        if(!this.state.success && this.state.badCredentials){
            errorCtrl = <Text style={styles.error}>
                That username and password combination did not work
            </Text>;
        }

        if(!this.state.success && this.state.unknownError){
            errorCtrl = <Text style={styles.error}>
                We experienced an unexpected issue
            </Text>;
        }

        return (
            <View style={{marginTop: 65}}>
          			<TouchableHighlight
                    style={styles.button}>
                    <Text style={styles.buttonText}>Search movies</Text>
                </TouchableHighlight>
          			<TextInput
                    onChangeText={(text)=> this.setState({searchQuery: text})}
                    style={styles.loginInput}
                    placeholder="Search movies">
                </TextInput>
                    
                <TouchableHighlight
                    onPress={this.onSearchPressed.bind(this)}
                    style={styles.button}>
                    <Text style={styles.buttonText}>Search</Text>
                </TouchableHighlight>

                {errorCtrl}

                <ActivityIndicatorIOS
                    animating={this.state.showProgress}
                    size="large"
                    style={styles.loader}
                 />
            </View>
        )
    }

    onSearchPressed(){
        this.props.navigator.push({
            component: Movies,
            title: this.state.searchQuery,
            passProps: {
                searchQuery: this.state.searchQuery
            }
        });

    }
}

class Movies extends Component {
    constructor(props){
        super(props);

        var ds = new ListView.DataSource({
            rowHasChanged: (r1, r2) => r1 != r2
        });

        var items = [];
        this.state = {
            dataSource: ds.cloneWithRows(items),
            searchQuery: props.searchQuery,
            showProgress: true
        };

      	this.getCollection();
    }

    getCollection(){ 
       fetch('https://itunes.apple.com/search?media=movie&term='
             + this.state.searchQuery, {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          })
          .then((response)=> response.json())
          .then((responseData)=> {
						 console.log(responseData.results)
             this.setState({
               dataSource: this.state.dataSource.cloneWithRows(responseData.results),
               resultsCount: responseData.results.length,
               showProgress: false
             });
         /*
         this.props.navigator.replace({
               component: Movies,
               title: this.state.resultsCount
             });
				*/
       })
    }

    pressRow(rowData){
        this.props.navigator.push({
            title: rowData.name,
            component: CollectionDetails,
            passProps: {
                pushEvent: rowData
            }
        });
    }

    renderRow(rowData){
        return (
          	<TouchableHighlight
                onPress={()=> this.pressRow(rowData)}
                underlayColor='#ddd'
          	>
            <View style={styles.imgsList}>
              <Image
                  source={{uri: rowData.artworkUrl100}}
                  style={styles.img}
              />
                <View> 
                    <Text>{rowData.trackName}</Text>
                    <Text>{rowData.country}</Text>
                    <Text>{rowData.primaryGenreName}</Text>
                    <Text>{rowData.artistName}</Text>
              </View>              
            </View>
          </TouchableHighlight>
        );
    }

    render(){
      if(this.state.showProgress){
        return (
            <View style={{
                flex: 1,
                justifyContent: 'center'
            }}>
                <ActivityIndicatorIOS
                    size="large"
                    animating={true} />
            </View>
        );
      }
        return (

        <View style={{flex: 1, justifyContent: 'center'}}>
          <View style={{marginTop: 60}}>
            <Text style={styles.countHeader}>
            	Have founded {this.state.resultsCount} items.
            </Text>
          </View>

          <ScrollView style={{marginTop: 0, marginBottom: 60}}>
            <ListView 
              dataSource={this.state.dataSource}
              renderRow={this.renderRow.bind(this)}
            />
  				</ScrollView>
			  </View>
      )
	}
}

const styles = StyleSheet.create({
    AppContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'gray',
    },
    countHeader: {
      fontSize: 16,
      textAlign: 'center',
      padding: 15,
      backgroundColor: '#F5FCFF',
    },
    welcome: {
      fontSize: 20,
      textAlign: 'center',
      margin: 20,
    },
    container: {
        backgroundColor: '#F5FCFF',
        paddingTop: 40,
        padding: 10,
        alignItems: 'center',
        flex: 1
    },
    logo: {
        width: 66,
        height: 65
    },
    heading: {
        fontSize: 30,
        margin: 10,
        marginBottom: 20
    },
    loginInput: {
        height: 50,
        marginTop: 10,
        padding: 4,
        fontSize: 18,
        borderWidth: 1,
        borderColor: '#48BBEC',
        borderRadius: 0,
        color: '#48BBEC'
    },
    button: {
        height: 50,
        backgroundColor: '#48BBEC',
        borderColor: '#48BBEC',
        alignSelf: 'stretch',
        marginTop: 10,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 5
    },
    buttonText: {
        color: '#fff',
        fontSize: 24
    },
    loader: {
        marginTop: 20
    },
    error: {
        color: 'red',
        paddingTop: 10
    },
      imgsList: {
      flex: 1,
      flexDirection: 'row',
      padding: 0,
      alignItems: 'center',
      borderColor: '#D7D7D7',
      borderBottomWidth: 1,
      backgroundColor: '#fff'
    },
    img: {
      height: 100,
      width: 100,
      borderRadius: 20,
      margin: 20
    }
});
AppRegistry.registerComponent('SampleApp', () => App);
